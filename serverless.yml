# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    v1.docs.serverless.com
#
# Happy Coding!


service: msg-gateway
provider:
  name: aws
  runtime: nodejs4.3
  stage: dev
  region: eu-west-1
  memorySize: 128
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "SNS:Publish"
      Resource:
        - "arn:aws:sns:${self:provider.region}:*:msgGateway-receivedMsg-${self:provider.stage}"


# you can add packaging information here
# package:
#  include:
#    - lib
#  exclude:
#    - exclude-me.js
#  artifact: my-service-code.zip

httpDefaults: &http_defaults
  method: get
  private: false
  integration: lambda

functions:
  webhookFunc:
    handler: functions/webhook.handler
    events:
      - http:
          << : *http_defaults
          path: webhook/{service_name}
          method: POST
      - http:
          << : *http_defaults
          path: webhook/{service_name}
  sendFunc:
    handler: functions/send.handler
    events:
      - http:
          << : *http_defaults
          path: send
          method: POST
      - sns: msgGateway-sendMsg-${self:provider.stage}


#   you can add any of the following events
#   events:
#     - http:
#         path: users/create
#         method: get
#     - s3: ${bucket}
#     - schedule: rate(10 minutes)
#     - sns: greeter-topic

plugins:
  - serverless-offline
  # - serverless-mocha-plugin

# The problem here is that you can't expicitly create resources for resources that are going to be created anyway (i.e. an SNS Topic)
# I'm trying to create them so I can access their ARN in the future via outputs

# resources:
#   Resources:
#     SnsSendMsg:
#       Type: AWS::SNS::Topic
#       Properties:
#         TopicName: msgGateway-sendMsg-${self:provider.stage}
#     SnsReceivedMsg:
#       Type: AWS::SNS::Topic
#       Properties:
#         TopicName: msgGateway-receivedMsg-${self:provider.stage}
#   Outputs:
#     SnsSendMsg:
#       Description: "ARN for sendMsg topic"
#       Value: 'Ref'
#     SnsReceivedMsg:
#       Description: "ARN for receivedMsg topic"
#       Value: 'Ref'
